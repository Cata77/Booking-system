input {
    jdbc {
        jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.7.3.jar"
        jdbc_driver_class => "org.postgresql.Driver"
        jdbc_connection_string => "jdbc:postgresql://postgres:5432/hotel_db"
        jdbc_user => "cata"
        jdbc_password => "password"
        schedule => "*/10 * * * * *"
        statement_filepath => "/usr/share/logstash/queries/hotel_query.sql"
        use_column_value => true
        tracking_column => "last_update"
        tracking_column_type => "timestamp"
        clean_run => false
    }
}

filter {
    aggregate {
        task_id => "%{hotel_id}"
        code => "
            map['id'] ||= event.get('hotel_id')
            map['name'] ||= event.get('hotel_name')
            map['country'] ||= event.get('country')
            map['city'] ||= event.get('city')
            map['address'] ||= event.get('address')
            map['hotelCategory'] ||= event.get('hotel_category')
            map['accommodationType'] ||= event.get('accommodation_type')
            map['propertyType'] ||= event.get('property_type')
            map['description'] ||= event.get('description')
            map['checkInTime'] ||= '09:30:00'
            map['checkOutTime'] ||= '12:00:00'
            map['rooms'] ||= []
            map['features'] ||= []

            room = {
                'id' => event.get('room_id'),
                'hotelName' => event.get('hotel_name'),
                'bedroomCount' => event.get('bedroom_count'),
                'bedCount' => event.get('bed_count'),
                'maxGuestsCount' => event.get('max_guests_count'),
                'price' => event.get('price')
            }
            map['rooms'] << room unless map['rooms'].include?(room)

            feature = {
                'id' => event.get('feature_id'),
                'name' => event.get('feature_name')
            }
            map['features'] << feature unless map['features'].include?(feature)

            event.cancel()
        "
        push_previous_map_as_event => true
        timeout => 5
    }
    mutate {
        remove_field => ["@version", "@timestamp"]
    }
}

output {
    elasticsearch {
        hosts => ["http://elasticsearch:9200"]
        index => "hotels"
        document_id => "%{id}"
    }
    stdout {
        codec => rubydebug
    }
}
